from flask import Blueprint, request, render_template, redirect, url_for, flash
import subprocess
import os
import shutil

# Corrigir o nome do Blueprint
config_rede_bp = Blueprint('config_rede', __name__, template_folder='templates')

INTERFACES_FILE = "/etc/network/interfaces"
RESOLVCONF_FILE = "/etc/resolv.conf"
RESOLVCONF_BKP_FILE = "/etc/resolv.conf.bak"
BACKUP_FILE = "/etc/network/interfaces.bak"

def backup_interfaces():
    if os.path.exists(INTERFACES_FILE):
        shutil.copy2(INTERFACES_FILE, BACKUP_FILE)

def backup_resolvconf():
    if os.path.exists(RESOLVCONF_FILE):
        shutil.copy2(RESOLVCONF_FILE, RESOLVCONF_BKP_FILE)

def apply_network_config(iface):
    try:
        subprocess.run(["ifdown", iface], check=True)
        subprocess.run(["ifup", iface], check=True)
        return True, "Configuração aplicada com sucesso!"
    except subprocess.CalledProcessError as e:
        return False, f"Erro ao aplicar a configuração: {e}"

@config_rede_bp.route("/config/rede", methods=["GET", "POST"])
def config_rede():
    network = {
    	"hostname": subprocess.getoutput("hostname"),
   	"iface": subprocess.getoutput("grep 'auto ' /etc/network/interfaces | grep -v lo | awk '{print $2}'"),
   	"ip_atual": subprocess.getoutput("grep address /etc/network/interfaces | awk '{print $2}'"),
   	"netmask": subprocess.getoutput("grep netmask /etc/network/interfaces | awk '{print $2}'"),
 	"gateway": subprocess.getoutput("ip route | grep default | awk '{print $3}'"),
 	"dns": ", ".join(subprocess.getoutput("grep nameserver /etc/resolv.conf | awk '{print $2}'").splitlines())
	}

    mensagem = None
    erro = None

    if request.method == "POST":
        iface = request.form['iface']      # ex: eth0
        ip = request.form['ip']
        netmask = request.form['netmask']
        gateway = request.form['gateway']
        dns = request.form['dns']

        backup_interfaces()

        interfaces_content = f"""# Arquivo gerado pelo Micro PABX Flask
auto lo
iface lo inet loopback

auto {iface}
iface {iface} inet static
    address {ip}
    netmask {netmask}
    gateway {gateway}
"""
        try:
            with open(RESOLVCONF_FILE, "w") as file:
                dns = dns.replace(" ","")
                dns = dns.split(",")
                file.write(f"Arquivo gerado pelo Micro PABX Flask \n")
                for ip in dns:
                    file.write(f"nameserver {ip}\n")

        except PermissionError:
            erro = "Permissaão negada no resolv.conf!"

        try:
            with open(INTERFACES_FILE, "w") as f:
                f.write(interfaces_content)

            success, message = apply_network_config(iface)
            if not success:
                erro = message
            else:
                mensagem = message

        except PermissionError:
            erro = "Permissão negada! Rode o Flask como root ou ajuste as permissões."

    return render_template("config_rede.html", network=network, mensagem=mensagem, erro=erro)

